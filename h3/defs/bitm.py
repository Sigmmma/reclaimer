#Written by gbMichelle with help from the adjutant and assembly plugin files
from reclaimer.hek.defs.bitm import *
from reclaimer.common_descs import *
from supyr_struct.defs.block_def import BlockDef

sequence_related = Struct("sequence thing",
    ascii_str32("sequence name"),
    UInt16("idx"),
    SIZE=40,
    )

bitmap = Struct("bitmap",
    UEnum32('bitm id', ('bitm', 'bitm'), DEFAULT='bitm', EDITABLE=False),
    UInt16("width", SIDETIP="pixels", EDITABLE=False),
    UInt16("height", SIDETIP="pixels", EDITABLE=False),
    UInt8("depth", SIDETIP="pixels", EDITABLE=False),
    Bool8("format flags",
        "delete from cache file",
        "bitmap create attempted",
        "unknown",
        "is tiled",
        ),
    SEnum16("type",
        "texture 2d",
        "texture 3d",
        "cubemap",
        "white",
        EDITABLE=False
        ),
    SEnum16("format",
        "a8",
        "y8",
        "ay8",
        "a8y8",
        "unused4",
        "unused5",
        ("r5g6b5", 6),
        "unused7",
        ("a1r5g5b5", 8),
        ("a4r4g4b4", 9),
        ("x8r8g8b8", 10),
        ("a8r8g8b8", 11),
        "unused12",
        "unused13",
        ("dxt1", 14),
        ("dxt3", 15),
        ("dxt5", 16),
        ("p8-bump", 17),
        ("p8", 18),
        ("argbfp32", 19),
        ("rgbfp32", 20),
        ("rgbfp16", 21),
        ("u8v8", 22),
        "unused23",
        "unused24",
        "unused25",
        "unused26",
        "unused27",
        "unused28",
        "unused29",
        "unused30",
        ("dxt5a", 31),
        "unused32",
        ("dxn", 33),
        ("ctx1", 34),
        ("dxt3a_alpha", 35),
        ("dxt3a_mono", 36),
        ("dxt5a_alpha", 37),
        ("dxt5a_mono", 38),
        ("dxn_mono_alpha", 39),
        "unused40",
        "unused41",
        "unused42",
        "unused43",
        "unused44",
        ),
    Bool16("flags",
        "power of 2 dim",
        "compressed",
        "palletized",
        "swizzled",
        "linear",
        "v16u16",
        "mip map debug level",
        "prefer low detail",
        ("always on", 1<<9),
        ("interlaced", 1<<12),
        ),
    UInt16("registration point x"),
    UInt16("registration point y"),
    UInt8("mipmaps"),
    UInt8("unknown0"),
    UInt8("interleaved index"),
    UInt8("unknown1"),

    UInt32("pixels offset"),
    UInt32("pixels meta size"),
    UInt32("bitmap id unknown1"),
    UInt32("bitmap data pointer"),
    UInt32("bitmap id unknown2"),
    UInt32("base address"),
    SIZE=48,
    )
    
raw_information = Struct("raw_information",
    UInt16("asset salt", GUI_NAME="[zone] asset salt"),
    UInt16("asset index", GUI_NAME="[zone] asset index"),
    UInt32("unknown"),
    SIZE=8
    )

    
bitm_meta_def = BlockDef("bitm",
    SInt16("unknown1"),
    SInt16("unknown2"),
    SInt16("unknown3"),
    SInt16("unknown4"),
    Float("blur filter size", MIN=0.0, MAX=10.0, SIDETIP="[0,10] pixels"),
    float_neg_one_to_one("alpha bias"),
    SInt16("unknown5"),
    Bool16("flags",
        "enable diffusion dithering",
        "disable height map compression",
        "uniform sprite sequences",
        "sprite bug fix",
        "use sharp bump filter",
        "unused", # Used for decal bumps
        "use clamped bump filter",
        "invert detail fade",
        "swap x y vector components",
        "convert from signed",
        "convert to signed",
        "import mipmap chains",
        "intentionally true color"
        ),
    reflexive("sequence related", sequence_related, 256, DYN_NAME_PATH='.sequence_name'), #0x14
    reflexive("unknown sequences", sequence, 256, DYN_NAME_PATH='.sequence_name'), #0x20
    rawdata_ref("compressed color plate data"),
    rawdata_ref("processed pixel data"),
    reflexive("sequences", sequence, 256, DYN_NAME_PATH='.sequence_name'),
    reflexive("bitmaps", bitmap, 2048),
    
    rawdata_ref("unknown6"),
    Pad(12),
    reflexive("raw info normal", raw_information,
              GUI_NAME="raw information [normal]"),
    reflexive("raw info interleaved", raw_information,
              GUI_NAME="raw information [interleaved]"),
    
    ENDIAN=">", TYPE=Struct, SIZE=164
    )
