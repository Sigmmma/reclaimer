Current speed of OBJECTS.PS2: 41KB/s

High Priority:

make an immutable dictionary class called a "Descriptor"
    Descriptors will require a custom set method such as Replace() which will take
    the changes being given to it and return a copy of itself with the changes
    made. The reason for this is because __setattr__() cant return anything.

    Do the above for __setattr__, __delattr__, __setitem__, and __delitem__


When ripping a map with deprotect on, make a "Requires" set and a 
"Required_By" list for each tag. The Requires set will contain the
Tag_IDs of all tags that the tag requires to have valid names before
it is written and the value in the Required_By list will be a list of all
blocks that point to that Tag_ID.

When scanning through the tags, add each non-null Tag_Index_Ref
block to the Required_By list of the tag it points to, and add the Tag_ID
of the tag it points to to the current tag's Requires set. Set each of those
Tag_Index_Ref blocks Tag_Path_Pointer to 0 and Tag_ID fields to
0xFFFFFFFF. Set each of the Reflexive blocks ID and Reflexive_ID to 0
as well as the same kind of fields in Raw_Data_Ref.

When done, write the meta data of all the tags whose Tag_IDs have an empty 
Requires set to a BytearrayBuffer(not including the tag header), and make 
a hash of the buffer. Use this hash to find the name of the tag in the Hash_Cache
and, if it fails, name it heuristically. Replace the Tag_Path string of all blocks
that depend on it with the new name and(in a separate series of lists) remove
the name from lists that say "some_tag" depends on that tag.

Check each tag to see which ones have an empty Requires set and run the
above paragraph of steps on it. Repeat this process until all tags have
been written. If there is a point where no tags have an empty Requires
set, either name it heuristically or ask the user what to name it.

MAKE SURE TO REMOVE Compressed_Color_Plate_Data from bitmap tags
when making their hashes as well as compressed vertices in models and bsp

make sure to null the tag class in tag references that dont exist so that the
hashes still work with smokescreen protected maps.


Finish docstrings for modules and update existing ones.

Medium Priority:

Make a Union Field_Type that allows specifying multiple
descriptors for how to decode/encode the data.
    The actual data will be stored in a bytearray object under self.Val and is
    decoded  on the fly to give the intended object.
    When each attribute is set, only the part of the bytearray that it resides
    in will be set, meaning if it only takes up the first 2 bytes of a 4 byte union,
    only the first 2 bytes will be affected, and the last 2 will remain the same

    can't do anything about changing the ordering of the bytes because it would
    be possible to make the largest attribute be a 4 char 32bit string, but have
    the other entries be endianness reliant things.

Need to make it so that readers/writers/decoders/encoders have better
handling of exceptions and give better details regarding the exception.
    Do this for the whole library in general where necessary

    place try/except around all encoding routines to catch and report errors better

Move sanitization routines that are specific to certain Field_Types into a separate
function and add as an attribute to the Field_Type under the name "Sanitizer".
    The Field_Type.Sanitizer() will get called whenever encountered in a descriptor

    This will allow the removal of Is_Enum and Is_Bool


Low Priority:

Make it possible to call a Field_Type and provide a Name string
followed by a calling of all the Field_Types of each of its fields.
    This will return a Builder object that, when called with
    the proper arguments, will return a fully constructed Tag_Block.

    Make it possible to get/set the descriptor of these constructor objects

    This will be a good alternative for those who don't want to use the
    JSON style dict definition method, though all of the keyword arguments
    will need to go after all the fields have been specified, thus the
    keyword arguments like GUI_NAME and POINTER will be at the bottom

Make Bin_Size recursion safe

Implement recursive pointer based blocks.
    When writing, pass around a dictionary of which block IDs have already had
    their pointers calculated and what the pointer value is. When a reused block
    is about to have its corrosponding pointer set, it will instead use the
    pointer that already exists. When the block is being written, a dictionary
    will be passed around with which block ID was written to which location.
    If an ID already exists in the dictionary, the block is not written.

    When reading, a dictionary of pointers to blocks is passed around. When a
    pointer is read that exists in the dictionary keys, the corrosponding
    block in the dictionary is used instead of reading it from the file again.

    Make it so that Pointer32/64 are set to 0 when their pointed to block DNE



############
HALO RELATED
############

Make descriptor for weapon hud tag
Make descriptor for unit hud tag
Make descriptor for grenade hud tag
Make descriptor for hud_globals tag

make program to load all hud, shader_environment, shader_model, and bitmap 
tags it can find, load all bitmaps referenced within those tags, pass them 
to the bitmap convertor with settings specifying how to convert them.
*shader_environment requires the bump maps to be turned into P-8 bump
*shader_model requires multipurpose maps to have their channels swapped
(this also means change the channel usage enum in the shader_model

############
HALO RELATED
############



BITMAP MODULE TODO:

Make sure the linear size is computed correctly for DDS headers
Finish DDS importer
Incorporate CHANNEL_ORDER into raw packers and unpackers. use it by
	getting which index A, R, G, and B are in and use those
	indexes as the locations to place the unpacked channels into

	not sure how I'm going to incorporate it in non raw formats(DXT)

Make setting to use same palette for all mipmaps of a bitmap
Write palettized mipmap generator.
    make it so that a palette can be supplied to the 
    mipmap generator so it already has one to work from




GNUerilla Ideas:

create "UNITS" and make it accept an object which defines a 
way to display the data(bytes, KB, MB, degrees, radians, etc).
	Make it so the first entry in the Units is the default
	unit and all other ones base themselves around it

Undo system that works by using a redo deque and undo deque object
	https://docs.python.org/2/library/collections.html#deque-objects

	Need an object which has these properties:
		list to hold all the blocks that are changed
		list to hold all the previous block values
		list to hold which index of each block was changed