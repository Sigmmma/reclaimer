
######################################################################
'''All these structure defintions are only being kept for illustrating
the hierarchy of the quad-word chunks and what is stored in them.'''
######################################################################
'''
def get_uv32_size(block=None, parent=None, attr_index=None,
                   rawdata=None, new_value=None, *args, **kwargs):
    if block and parent is None:
        parent = block.PARENT
    if new_value is not None:
        parent.length = new_value//8
    return parent.length*8

def get_uv16_size(block=None, parent=None, attr_index=None,
                   rawdata=None, new_value=None, *args, **kwargs):
    if block and parent is None:
        parent = block.PARENT
    if new_value is not None:
        parent.length = new_value//4
    return parent.length*4

def get_uv8_size(block=None, parent=None, attr_index=None,
                   rawdata=None, new_value=None, *args, **kwargs):
    if block and parent is None:
        parent = block.PARENT
    if new_value is not None:
        parent.length = new_value//2
    return parent.length*2

def get_vert32_size(block=None, parent=None, attr_index=None,
                    rawdata=None, new_value=None, *args, **kwargs):
    if block and parent is None:
        parent = block.PARENT
    if new_value is not None:
        parent.length = new_value//12
    return parent.length*12

def get_vert16_size(block=None, parent=None, attr_index=None,
                    rawdata=None, new_value=None, *args, **kwargs):
    if block and parent is None:
        parent = block.PARENT
    if new_value is not None:
        parent.length = new_value//6
    return parent.length*6

def get_vert8_size(block=None, parent=None, attr_index=None,
                   rawdata=None, new_value=None, *args, **kwargs):
    if block and parent is None:
        parent = block.PARENT
    if new_value is not None:
        parent.length = new_value//3
    return parent.length*3

def get_stream_type(block=None, parent=None, attr_index=None,
                    rawdata=None, new_value=None, *args, **kwargs):
    if rawdata is not None:
        pad = (STREAM_ALIGN-(rawdata.tell()%STREAM_ALIGN))%STREAM_ALIGN
        if rawdata.peek(4)[3] not in known_streams:
            print('UNKNOWN DATA STREAM')
            try:
                if parent is None:
                    parent = block.PARENT
                print(rawdata.peek(4)[3], rawdata.tell(),
                      parent.get_tag().filepath)
            except:
                print(rawdata.peek(4)[3], rawdata.tell())
            print()
        return rawdata.peek(4+pad)[-1]

def has_next_stream(block=None, parent=None, attr_index=None,
                    rawdata=None, new_value=None, *args, **kwargs):
    if rawdata is not None:
        pad = (STREAM_ALIGN-(rawdata.tell()%STREAM_ALIGN))%STREAM_ALIGN
        return rawdata.peek(4+pad)[-1] not in (0, 96)

def is_pad_stream(block=None, parent=None, attr_index=None,
                  rawdata=None, new_value=None, *args, **kwargs):
    if rawdata is not None:
        pad = (STREAM_ALIGN-(rawdata.tell()%STREAM_ALIGN))%STREAM_ALIGN
        return rawdata.peek(4+pad)[-1] == 0

get_vnorm16_size = get_uv8_size

unknown_stream = Container("unknown stream",
    BytesRaw("unknown", SIZE=3, DEFAULT=b'\x00\x00\x00'),
    UInt8("sentinel"),
    ALIGN=4,
    )

pad_stream = Container("pad stream",
    UInt32("sentinel"),
    ALIGN=4,
    )

link_start = Struct("link start",
    Pad(3),
    UInt8("sentinel", DEFAULT=20),
    ALIGN=4,
    )

strip_link = Struct("strip link",
    Pad(3),
    UInt8("sentinel", DEFAULT=23),
    ALIGN=4,
    )

uv_32bit = Container("uv 32bit",
    BytesRaw("unknown", SIZE=2, DEFAULT=b'\x04\x80'),
    UInt8("length"),
    UInt8("sentinel", DEFAULT=100),
    UInt32Array('data', SIZE=get_uv32_size),
    ALIGN=4,
    )

uv_16bit = Container("uv 16bit",
    BytesRaw("unknown", SIZE=2, DEFAULT=b'\x04\x80'),
    UInt8("length"),
    UInt8("sentinel", DEFAULT=101),
    UInt16Array('data', SIZE=get_uv16_size),
    ALIGN=4,
    )

uv_8bit = Container("uv 8bit",
    BytesRaw("unknown", SIZE=2, DEFAULT=b'\x04\x80'),
    UInt8("length"),
    UInt8("sentinel", DEFAULT=102),
    UInt8Array('data', SIZE=get_uv8_size),
    ALIGN=4,
    )

vert_32bit = Container("vert 32bit",
    BytesRaw("unknown", SIZE=2, DEFAULT=b'\x01\x80'),
    UInt8("length"),
    UInt8("sentinel", DEFAULT=104),
    SInt32Array('data', SIZE=get_vert32_size),
    ALIGN=4,
    )

vert_16bit = Container("vert 16bit",
    BytesRaw("unknown", SIZE=2, DEFAULT=b'\x01\x80'),
    UInt8("length"),
    UInt8("sentinel", DEFAULT=105),
    SInt16Array('data', SIZE=get_vert16_size),
    ALIGN=4,
    )

vert_8bit = Container("vert 8bit",
    BytesRaw("unknown", SIZE=2, DEFAULT=b'\x01\x80'),
    UInt8("length"),
    UInt8("sentinel", DEFAULT=106),
    SInt8Array('data', SIZE=get_vert8_size),
    ALIGN=4,
    )

vnorm_16bit = Container("vnorm 16bit",
    BytesRaw("unknown", SIZE=2, DEFAULT=b'\x02\x80'),
    UInt8("length"),
    UInt8("sentinel", DEFAULT=111),
    UInt16Array('data', SIZE=get_vnorm16_size),
    ALIGN=4,
    )

stream_switch = Switch('data stream',
    DEFAULT=unknown_stream,
    CASE=get_stream_type,
    CASES={ 20:link_start,
            23:strip_link,
            100:uv_32bit,
            101:uv_16bit,
            102:uv_8bit,
            104:vert_32bit,
            105:vert_16bit,
            106:vert_8bit,
            #108:tri_strip
            109:vert_color_abgr,
            111:vnorm_16bit,
            },
    ALIGN=4,
    )

tri_strip = Container("tri strip",
    BytesRaw("unknown", SIZE=3, DEFAULT=b'\x00\x80\x01'),
    UInt8("sentinel", DEFAULT=108),
    UInt32('vert count'),
    BytesRaw("unknown", SIZE=4, DEFAULT=b'\x00\x00\x00\x2D'),
    Float("face_dir"),# 1.0 == faces are clockwise
    #                  -1.0 == faces are counter-clockwise
    #                  No solid idea why they decided to use a float for this.
    #                  Maybe they use it for scaling vertex normals.
    Float("uv_scale"),
                   
    #verts, norms, uvs
    Switch('verts',   INCLUDE=stream_switch),
    Switch('norms',   INCLUDE=stream_switch),
    Switch('uvs',     INCLUDE=stream_switch),

    ALIGN=4,
    SIZE=20,
    )

tri_strip_switch = Switch('tri strip',
    DEFAULT=unknown_stream,
    CASE=get_stream_type,
    CASES={ 20:link_start,
            23:strip_link,
            108:tri_strip },
    ALIGN=4,
    )

sub_object_model = Container("sub-object model",
    LUInt16("qword count"),
    BytesRaw("unknown", SIZE=6, DEFAULT=b'\x00\x60\x00\x00\x00\x00'),

    ModelStream('data steams',
        CASE=has_next_stream,
        SUB_STRUCT=tri_strip_switch,
        ALIGN=4),

    WhileArray('pad steams',
        CASE=is_pad_stream,
        SUB_STRUCT=pad_stream,
        ALIGN=4),

    ALIGN=4,
    )

'''
